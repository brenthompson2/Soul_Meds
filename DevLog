DevLog for Soul Meds app
Brendan Thompson

=== 03/24/18 ===

I) Summary
	A) Started adding official Data

II) Takeaways



III) Resources

IV) To Do

	A) Features
		- Alarms Activity
			* Save & Retrieve the data
			* Symptoms: implement Add, Toggle
			* Alarms: implement Add, Edit, Toggle, and Delete
			* Actual Alarm Functionality
	B) Design
		- Need Button Images
	C) Back End
		- Sync user data with Firebase

V) Activity Log

A) Started adding official Data
	- Created a DataManager class and a SymptomObject
		`
		class SymptomObject{
		    public String symptomName;
		    public int numVerses;
		    public ArrayList<String> arrayVerses;
		    public ArrayList<String> arrayReferences;
		    public ArrayList<String> arrayVerseCards;
		}
		`
	- Wrote out all of the data for 3/25 symptoms
		- name & 5 verse data (numVerses = array.size())


=== 03/22/18 ===

I) Summary
	A) Simplified Login Interface
	B) Started bringing in actual resources
	C) Started making Alarm Times editable

II) Takeaways

	- Login / Register working fine
	- Should use "Spinner" for selecting symptoms:

III) Resources

IV) To Do

	A) Features
		- Alarms Activity
			* Save & Retrieve the data
			* Symptoms: implement Add, Toggle
			* Alarms: implement Add, Edit, Toggle, and Delete
			* Actual Alarm Functionality
	B) Design
		- Need Button Images
	C) Back End
		- Sync user data with Firebase

V) Activity Log

A) Simplified Login Interface
	- made navigation buttons style buttonBarNegativeButtonStyle

B) Started bringing in actual resources
	- app > src > main > res > values > symptomList.xml
	- app > src > main > res > values > bibleQuoteList.xml

C) Started making Alarm Times editable
	- https://developer.android.com/guide/topics/ui/controls/pickers.html
		- Should use DialogFragment to display TimePicker
	1) Created java class alarms_TimePickerDialog
		- extends DialogFragment
		- implements TimePickerDialog.OnTimeSetListener
		`
	        super.onCreateDialog(savedInstanceState);
	        // Set default value to current time
	        final Calendar c = Calendar.getInstance();
	        int hour = c.get(Calendar.HOUR_OF_DAY);
	        int minute = c.get(Calendar.MINUTE);

	        // Create TimePickerDialog instance
	        return new TimePickerDialog(getActivity(), this, hour, minute, true);
        `
	2) Open the Dialog when action started
		`
		    DialogFragment timeSelectFragment = new alarms_TimePickerDialog();
		    timeSelectFragment.show(getSupportFragmentManager(), "timePicker");
	    `

=== 03/21/18 ===

I) Summary
	A) Implemented Alarm Time Delete using a context menu
	B) Added back button for Alarm page
	C) Started Add for Symptoms and Times using FloatingActionButton
	D) Fixed Navigation between Login

II) Takeaways

	- Now able to delete symptoms
		- long click to open context menu
		- select delete in the context menu
	- Need to implement function for adding new Symptom or Time
	- Crappy implementation of only going to login screen the first time

III) Resources

	- FloatingActionButton: https://developer.android.com/guide/topics/ui/floating-action-button.html
	- Android Icons: https://material.io/icons/

IV) To Do

	A) Features
		- Alarms Activity
			* Save & Retrieve the data
			* Symptoms: implement Add, Toggle
			* Alarms: implement Add, Edit, Toggle, and Delete
	B) Design
		- Need Button Images
	C) Back End
		- Sync user data with Firebase

V) Activity Log

A) Implemented Alarm Time Delete using a context menu
	- see Activity Log from 03/20/18

B) Added back button for Alarm page
	1) Set MainActivity as parent of AlarmsActivity
		- `android:parentActivityName=".MainActivity"`
	2) Bring back navbar by removing the theme in AndroidManifest
	3) remove custom ToolBar in activity_alarms.xml
	- the drop shadow looks meh

C) Started Add for Symptoms and Times using FloatingActionButton
	1) Add the Icons
		- https://material.io/icons/
		- download as PNG
		- add the 6 drawable-<resolution> folders to src > main > res
		- https://material.io/icons/#ic_add
		- https://material.io/icons/#ic_alarm_add

	2) Add the button to the fragment layout
	    <android.support.design.widget.FloatingActionButton
	        android:id="@+id/action_add_symptom"
	        android:layout_width="wrap_content"
	        android:layout_height="wrap_content"
	        android:layout_marginBottom="16dp"
	        android:layout_marginRight="16dp"
	        app:layout_constraintBottom_toBottomOf="parent"
	        app:layout_constraintRight_toRightOf="parent"
	        android:backgroundTint="@color/colorPrimary"
	        android:src="@drawable/ic_add_white_24dp"/>

	3) Handle the button clicked

D) Fixed Navigation between Login
	- calling finish(); to close
	- using static numVisits to manage opening Login Activity
		- if numVisits == 0, Login
	- Ugly shortcut

=== 03/20/18 ===

I) Summary
	A) Implemented Alarm Symptom Delete using a context menu

II) Takeaways

	- Now able to delete symptoms
		- long click to open context menu
		- select delete in the context menu

III) Resources

	- Delete List items w/ Context Menu: https://www.youtube.com/watch?v=2mrN5r9qshg

IV) To Do

	A) Features
		- Alarms Activity
			* Save & Retrieve the data
			* Symptoms: implement Add, Toggle
			* Alarms: implement Add, Edit, Toggle, and Delete
	B) Design
		- Need Button Images
	C) Backend
		- Sync user data with Firebase

V) Activity Log

A) Implemented Alarm Symptom Delete using a context menu
	- https://www.youtube.com/watch?v=2mrN5r9qshg

	1) Create the Menu Layout File
		- (right click on res > menu) > new > menu resource file
		- just add items
			- `<item android:id="@+id/delete"
        android:title="Delete"></item>`

	2) Register the ListView with the Context Menu
		- in onCreateView()
		- `registerForContextMenu(timeListView);`

	3) Override Creation of Context Menu
	    @Override
	    public void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo) {
	        super.onCreateContextMenu(menu, v, menuInfo);
	        MenuInflater menuInflater = new MenuInflater(this.getContext());
	        menuInflater.inflate(R.menu.alarms_symptom_context_menu, menu);
	    }

    4) Override handling Menu Action Selected
	    @Override
	    public boolean onContextItemSelected(MenuItem item) {
	        AdapterView.AdapterContextMenuInfo obj = (AdapterView.AdapterContextMenuInfo) item.getMenuInfo();

	        switch (item.getItemId()){
	            case R.id.delete:
	                symptomsList.remove(obj.position);
	                symptomsListAdapter.notifyDataSetChanged();
	                Log.d(TAG, String.valueOf(symptomsList));
	                break;
	            default:
	                break;
	        }

	        return super.onContextItemSelected(item);
	    }



=== 03/14/18 ===

I) Summary
	A) Created Symptoms Scaffold for tabbedAlarmsListView
	B) Created Alarms Scaffold for tabbedAlarmsListView
	C) Designed ListView Items

II) Takeaways

	- Alarms is now a Tabbed Activity with a ListView
	- Delete button not working

III) Resources

	- Android ListView tutorial: https://www.journaldev.com/10416/android-listview-with-custom-adapter-example-tutorial
	- My ExpandableListView version: https://github.com/brenthompson2/Soul_Meds/tree/expandableAlarmsListView
	- Android ListView item design:
	- Adding button to ListView item: https://stackoverflow.com/questions/17525886/listview-with-add-and-delete-buttons-in-each-row-in-android

IV) To Do

	A) Features
		- Alarms Activity
			* Create Alarms Tab
			* Save & Retrieve the data
			* Symptoms: implement Add, Toggle, and Delete
			* Alarms: implement Add, Edit, Toggle, and Delete
	B) Design
		- Need Button Images
	C) Backend
		- Sync user data with Firebase

V) Activity Log

A) Created Symptoms Scaffold for tabbedAlarmsListView
	- Fragment 1 = Symptoms
	- Fragment 2 = Alarms
	1) Create Fragment 1 Layout
		- Just add a a ListView
		- id = alarms_list
	2) Create alarms_list_item layout resource
		- Just a TextView
		- id = alarms_list_item
		- paddingLeft = "?android:attr/listPreferredItemPaddingLeft"
	3) Create AlarmsListAdapter custom ArrayAdapter
		a) Create Members
			- private Context mContext;
    		- private ArrayList<String> mListData;
		    - private int mResource;
		    - private int mTextViewResourceId;
		b) Define members in constructor
			"
			public AlarmsListAdapter(@NonNull Context context, int resource, int textViewResourceId, @NonNull List objects) {
		        super(context, resource, textViewResourceId, objects);
		        this.mContext = context;
		        this.mListData = (ArrayList<String>) objects;
		        this.mResource = resource;
		        this.mTextViewResourceId = textViewResourceId;
		        Log.d(TAG, String.valueOf(mListData));
		    }
		    "
		c) Setup getView()
			"@NonNull
		    @Override
		    public View getView(int position, @Nullable View convertView, @NonNull ViewGroup parent) {

		        // Get the data
		        String currentItemText = mListData.get(position);
		        // Log.d(TAG, currentItemText);

		        if (convertView == null) {
		            LayoutInflater inflater = (LayoutInflater)this.mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		            convertView = inflater.inflate(mResource, null);
		        }

		        TextView alarmItemTextView = convertView.findViewById(mTextViewResourceId);
		        alarmItemTextView.setTypeface(null, Typeface.BOLD);
		        alarmItemTextView.setText(currentItemText);
		        return convertView;
		    }
			"
	4) Create the List in alarms_fragment1
		a) Create Members
		    private ListView symptomListView;
		    private AlarmsListAdapter symptomsListAdapter;
		    private List<String> symptomsList;
	    b) Setup the List View in onCreateView()
	    	"
	        symptomListView = view.findViewById(R.id.alarms_list_symptoms);
	        initSymptomData();
	        symptomsListAdapter = new AlarmsListAdapter(this.getContext(), R.layout.alarms_list_item, R.id.alarms_list_item_TextView, symptomsList);
	        symptomListView.setAdapter(symptomsListAdapter);
	        "
        c) Define the data for symptomsList
        	"
        	private void initSymptomData(){
		        symptomsList = getCurrentSymptoms();
		        Log.d(TAG, String.valueOf(symptomsList));
		    }
		    "
	    d) For testing, generate the data
	    	"
	    	private ArrayList<String> getCurrentSymptoms(){
		        // TODO: Retrieve the saved list of the User's symptoms
		        ArrayList<String> listOfCurrentSymptoms = new ArrayList<>();

		        // Fake list of possible symptoms
		        ArrayList<String> fakeListOfSymptoms = new ArrayList<>(Arrays.asList("anger", "jealousy", "greed", "lust", "hate", "stealing", "violence"));

		        // Generating a fake list of user's  current Symptoms
		        for (int i = 0; i < 5; i++){
		            int randomIndex = new Random().nextInt(fakeListOfSymptoms.size());
		            listOfCurrentSymptoms.add(fakeListOfSymptoms.get(randomIndex));
		        }

		        return listOfCurrentSymptoms;
		    }
		    "

C) Designed ListView Items
	- Added a delete button
		- https://stackoverflow.com/questions/17525886/listview-with-add-and-delete-buttons-in-each-row-in-android
		- Wrapped everything in a RelativeLayout
		"
        android:layout_marginEnd="?android:attr/listPreferredItemPaddingLeft"
        android:layout_alignParentEnd="true"
        "

=== 03/13/18 ===

I) Summary
	A) Separated Alarm Implementations into new branches

II) Takeaways

	- Now have 3 branches with different Alarms Activity implementations

III) Resources

IV) To Do

V) Activity Log

A) Separated Alarm Implementations into new branches
	1) expandableAlarmsListView
		- Dynamic list of editable, toggleable, deleteable Prescription objects (Symptom & Time)
	2) tabbedAlarmsOriginal
		- 3 tabs each with a Prescription object (symptom & tab)
	3) tabbedAlarmsListView
		- 2 separate tabs, 1 with the symptoms and 1 with the times
		- dynamic, toggle-able,delete-able

=== 03/11/18 ===

I) Summary
	A) Created New Alarms Activity

II) Takeaways

	- Created another incorrect version of the alarm activity
		- Dynamic list of editable, toggle-able, delete-able Prescription objects (Symptom & Time)
		- Need to keep the symptoms separate from the times since all symptoms get addressed for every alarm

III) Resources

	- Expandable ListView: https://youtu.be/jZxZIFnJ9jE

IV) To Do

V) Activity Log

A) Created New Alarms Activity
	i) Simplified Layout:
		- List of AlarmPrescription objects
		- AlarmPrescription object = symptom, time, end date, on/off
		- Making it one form since the Android Time Pickers are supposed to be those big analog clocks
		- Using one object allows for the amount of them available and on to be dynamic
		- Decided to use ExpandableListView
			- top list = symptoms for all AlarmPrescriptions
			- expanded = edit properties

	ii) Created Alarms Activity
		- Layout for the activity itself
		- File -> New -> Empty Activity
		- Navigated to it when Alarms button clicked

	iii) Created Expandable ListView
		- https://youtu.be/jZxZIFnJ9jE
		1) Add ExpandableListView, give ID, fill space
		2) Add prescriptions_list_group layout resource file
			- Layout for the list itself
			- right click on "layout" in the project navigation
			- new -> layout resource file -> "prescriptions_list_group"
			- Text View with special padding
		3) Add prescription_item layout resource file
			- layout for an item's children
			- Text view with special padding
		4) Create PrescriptionsListAdaptor Java Class
			- extends ExpandableListAdaptor
			- Implement all Methods
		5) Initialize in AlarmsActivity
			- ListView, Adapter, DataHeader List, HashMap
			a) Get the data and use it to instantiate the adapter
				prescriptionsListAdapter = new PrescriptionsListAdapter(this, prescriptionListDataHeader, prescriptionHashMap);
			b) setAdaptor of ListView to the initialized adapter
				prescriptionsListView.setAdapter(prescriptionsListAdapter);

	iv) Made prescription info edit-able
		1) Listen for click on prescription info
	        prescriptionsListView.setOnChildClickListener(new ExpandableListView.OnChildClickListener() {
	            @Override
	            public boolean onChildClick(ExpandableListView parent, View v, int groupPosition, int childPosition, long id) {
	                Log.d(TAG, "Child " + groupPosition + " was clicked");
	                return true;
	            }
	        });
	    2)



=== 03/07/18 ===

I) Summary
	A) Removed old tabbed Alarms Activity
	B) Created Login Activity
	C) Created Register Activity

II) Takeaways

	- Now able to Login & Register with Firebase
	- Navigating between the activities is not super smooth.
		- Should probably replace the two separate login & register activities with one activity that has 2 fragments (tabbed or bottom navigation)

III) Resources

	- Connecting to Firebase
		- https://firebase.google.com/docs/auth/android/start/
	- Android Activity Lifecycle events
		- https://developer.android.com/guide/components/activities/activity-lifecycle.html#onresume

IV) To Do

V) Activity Log

A) Removes old tabbed Alarms Activity
	- removed all of the files
	- commented out navigation when alarm btn pressed

B) Created Login Activity
	- File -> New -> Activity -> Login Activity
	- Tools -> Firebase -> Authentication -> Email & Password Authentication
		1) Connect your app to Firebase
			- connected to Soul Meds
		2) Add Firebase Authentication to your app
			- adds dependencies
		3) Added Checking Current Auth State
			- LoginActivity.java -> onCreate
			- https://firebase.google.com/docs/auth/android/start/
		4) Sign in Existing Users
			- LoginActivity.java -> async doInBackground
			- https://firebase.google.com/docs/auth/android/start/

C) Created Register Activity (Should do fragments)
	- Copied Login Activity & Login Layout
	- Enabled navigation between Login & Register
	- handled Registering
		- https://firebase.google.com/docs/auth/android/start/
	- Quit Login after successful registration
		- https://developer.android.com/guide/components/activities/activity-lifecycle.html#onresume
		- onResume(){
			if loggedIn() {
				finish();
			}}
