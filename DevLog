DevLog for Soul Meds app
Brendan Thompson

================
=== 05/21/18 ===
================

I) Summary
	A) Implemented Complete Alarm Times page
	B) Implemented Complete Alarm Symptoms Backend
	C) Started writing program to convert data

II) Takeaways

	- New Alarms Activity is functional ("cancel" & "done" don't change anything, all edits happen immediately)

III) Resources

IV) To Do

	A) Features
		- Alarms Activity: don't save till "done"
		- Resources Activity: ?
		- Settings Activity: Settings page w/ tutorials, logout, and more
	B) Design
	C) Back End
		- Sync user data with Firebase

V) Activity Log

A) Implemented Complete Alarm Times page
	- new fragment layout and class
	- had to change PrescriptionManager to always have 3 in userTimesList
	- Using TextViews with OnClickListeneres to manage the Alarm Times
		- Pulls up TimePicker dialog

B) Implemented Complete Alarm Symptoms Backend
	- edits the alarms immediately (cancel & done don't change anything)

C) Started writing program to convert data
	- 25 symptoms * (1 name + 5 verses + 5 references + 5 verseCards) = 400 copy & pastes at least
	- writing c++ that reads the Verse.swift data into a a data structure then outputs it to a file in the new format
	- currently reads & writes to file and can tell if a line has a new symptom on it
		- in the process of parsing the data into the data structure
		- should write out a quick NDFA that simulates the parsing of a line

================
=== 05/17/18 ===
================

I) Summary
	A) Started Implementing Sharing to Facebook & Twitter

II) Takeaways

	- Started Major V2 update
	- New App Icon

III) Resources

IV) To Do

	A) Features
		- Alarms Activity: 3 symptoms, 3 alarms
		- Resources Activity: ?
		- Settings Activity: Settings page w/ tutorials, logout, and more
	B) Design
	C) Back End
		- Sync user data with Firebase

V) Activity Log

A) Started Implementing Sharing to Facebook & Twitter
	- got button images from Xcode version
	- requires Facebook Developer account stuff and dependencies

================
=== 05/17/18 ===
================

I) Summary
	A) Implemented Meds Activity Navigation
	B) Made MedsActivity look like iOS version
	C) Started new AlarmsActivity_Tabbed w/ AlarmsSymptomsFragment

II) Takeaways

	- MedsActivity flows making the user go through all before done
	- Started correct AlarmsActivity

III) Resources

IV) To Do

	A) Features
		- Alarms Activity: 3 symptoms, 3 alarms
		- Resources Activity: ?
		- Settings Activity: ?
	B) Design
	C) Back End
		- Sync user data with Firebase

V) Activity Log

A) Implemented Meds Activity Navigation
	- back, done, and next buttons
	- "< Back" = "\u003c Back"
	- "Next >" = "Next \u003e"

B) Made MedsActivity look like iOS version
	- Layout
	- Navigation
	- Still needs social media sharing

C) Started new AlarmsActivity_Tabbed w/ AlarmsSymptomsFragment
	- Created new fragment with 3 labels & 3 spinners `AlarmsSymptomsFragment`
	- Created new activity that opens that fragment `AlarmsActivity_Tabbed`
	- Filling spinners with allSymptomList data
		- https://stackoverflow.com/questions/15404206/populating-spinner-using-arraylist-in-android
	- Customized toolbar btn function & text based off current page
		- https://stackoverflow.com/questions/7424562/how-to-change-viewpagers-page
		- `mViewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() ...`

================
=== 05/13/18 ===
================

I) Summary
	A) Implemented Emergency Activity Flow

II) Takeaways

	- Emergency Button now asks to pic a symptom and presents it

III) Resources

IV) To Do

	A) Features
		- Alarms Activity: 3 symptoms, 3 alarms
		- Emergency Activity: pick symptom, go to MedsActivity
		- MedsActivity: "next" through all before exit
		- Resources Activity: ?
		- Settings Activity: ?
	B) Design
		- Need official Bible reference string
	C) Back End
		- Sync user data with Firebase

V) Activity Log

A) Implemented Emergency Activity

	- created EmergencyActivity
	- coppied over ListView logic from Alarms activity
		- get list using PrescriptionManager
	- setOnItemClickListener() and navigated to the MedsActivity
	- Pass the selection to the MedsActivity

================
=== 05/09/18 ===
================

I) Summary
	A) Updated Homepage
	B) Updated Meds Activity
	c) New App Icon

II) Takeaways

	- Started Major V2 update
	- New App Icon

III) Resources

IV) To Do

	A) Features
		- Alarms Activity: 3 symptoms, 3 alarms
		- Emergency Activity: pick symptom, go to MedsActivity
		- MedsActivity: "next" through all before exit
		- Resources Activity: ?
		- Settings Activity: ?
	B) Design
		- Need official Bible reference string
	C) Back End
		- Sync user data with Firebase

V) Activity Log

A) Updated Homepage
	- added crosswhite icon
	- increased icon size
	- made buttons arc around center cross

B) Updated Meds Activity
	- Added bible reference to bottom (need exact string)
	- centered quote vertically
	- set background as dark gray

c) New App Icon
	- created icons [http://romannurik.github.io/AndroidAssetStudio/icons-launcher.html]
	- extracted to src/main/

================
=== 04/04/18 ===
================

I) Summary
	A) Fixed Alarms
	B) Uploaded the official Demo on HockeyApp

II) Takeaways

	- Functioning Alarms

III) Resources

IV) To Do

	A) Features
		- Implement Toggle for Alarm Symptoms & Times
		*** Alarm System Not Complete:
			- Currently only 1 timer that goes off one minute from when it was added
			- Need To store an ID for each alarm & manage storage/deletion
			- Will need an AlarmManager class
		- 911 Activity
		- Resources Activity
		- Settings Activity
	B) Design
		- App Icon
		- MedsActivity Design
	C) Back End
		- Sync user data with Firebase

V) Activity Log

A) Fixed Alarms
	- Wasn't adding 12 to the hour if PM
	- Cleaned Code
	- Caught Exceptions
	- Stopped re-setting all alarms

B) Uploaded the official Demo on HockeyApp


================
=== 04/03/18 ===
================

I) Summary
	A) Connected With HockeyApp
	B) Started Fixing Alarms

II) Takeaways

	- App Icon Added
	- Login Navigation Fixed
	- Some Alarm Time Bugs Fixed

III) Resources

	- hockeyapp.net
	- Multiple Alarms: https://stackoverflow.com/questions/8469705/how-to-set-multiple-alarms-using-android-alarm-manager

IV) To Do

	A) Features
		- Implement Toggle for Alarm Symptoms & Times
		*** Alarm System Not Complete:
			- Currently only 1 timer that goes off one minute from when it was added
			- Need To store an ID for each alarm & manage storage/deletion
			- Will need an AlarmManager class
		- 911 Activity
		- Resources Activity
		- Settings Activity
	B) Design
		- App Icon
		- MedsActivity Design
	C) Back End
		- Sync user data with Firebase

V) Activity Log

A) Connected With HockeyApp
	- Integration:
		1) Give them the package from AndroidManifest
			`com.brendansapps.soulmeds`
		2) Add dependency using build.gradle
			`compile 'net.hockeyapp.android:HockeySDK:5.1.0'`
			- make sure repository configuration contains jCenter repository
			allprojects {
			    repositories {
			        jcenter()
			    }
			}
		3) Integrate
			- Add ID to build.gradle
				`manifestPlaceholders = [HOCKEYAPP_APP_ID: "112304HEXNUMBERWITH32DIGITS"]`
			- Add meta-data to AndroidManifest in <application></...>
				`<meta-data android:name="net.hockeyapp.android.appIdentifier" android:value="${HOCKEYAPP_APP_ID}" />`
			- Add CrashReporting and Beta-Distribution to MainActivity
				`
				import net.hockeyapp.android.CrashManager;

				public class YourActivity extends Activity {

				  @Override
				  public void onCreate(Bundle savedInstanceState) {
				    super.onCreate(savedInstanceState);
				    // Your own code to create the view
				    // ...

				    checkForUpdates();
				  }

				  @Override
				  public void onResume() {
				    super.onResume();
				    // ... your own onResume implementation
				    checkForCrashes();
				  }

				  @Override
				  public void onPause() {
				    super.onPause();
				    unregisterManagers();
				  }

				  @Override
				  public void onDestroy() {
				    super.onDestroy();
				    unregisterManagers();
				  }

				  private void checkForCrashes() {
				    CrashManager.register(this);
				  }

				  private void checkForUpdates() {
				    // Remove this for store builds!
				    UpdateManager.register(this);
				  }

				  private void unregisterManagers() {
				    UpdateManager.unregister();
				  }

				}
				`
		4) Add APK File to HockeyApp Dashboard
			- Build -> Build APK(s)
			- Soul Meds/app/build/outputs/apk/debug/app-debug.apk
		5) Release Notes

B) Started Fixing Alarms
	- Added an alarmID used for building the PendingIntent for set & cancel
	- alarmID = hour_string + minute_string + (isAM ? 0 : 1)
	- Still setting the alarm for the next minute
	- Multiple Alarms: https://stackoverflow.com/questions/8469705/how-to-set-multiple-alarms-using-android-alarm-manager

================
=== 04/02/18 ===
================

I) Summary
	A) Created App Icon
	B) Fixed Login Navigation
	C) Fixed Timer Bugs

II) Takeaways

	- App Icon Added
	- Login Navigation Fixed
	- Some Alarm Time Bugs Fixed
	*** Alarm System Not Complete:
		- Currently only 1 timer that goes off one minute from when it was added
		- Need To store an ID for each alarm
		- Will need an AlarmManager class

III) Resources

	- Icon Generator: https://romannurik.github.io/AndroidAssetStudio/icons-launcher.html

IV) To Do

	A) Features
		- Implement Toggle for Alarm Symptoms & Times
		- Delete Alarm time needs to delete from AlarmManager
		- 911 Activity
		- Resources Activity
		- Settings Activity
	B) Design
		- App Icon
		- MedsActivity Design
	C) Back End
		- Sync user data with Firebase

V) Activity Log

A) Created App Icon
	- Generated images using largest AppIcon from Xcode project
	- Circle & Square
	- Icon Generator: https://romannurik.github.io/AndroidAssetStudio/icons-launcher.html

B) Fixed Login Navigation
	- Fixed finishIfLoggedIn()
	- On registration called finish() instead of newIntent() when action_login_navigation
	- Call finish() if succeeded w/ login/registration

C) Fixed Timer Bugs
	- Sometimes App crashes if time has a 0 (5:05, 5:50, 4:30)
		- Fixed
	- Blank alarm times were causing crashes
		- Fixed

================
=== 03/31/18 ===
================

I) Summary
	A) Added Images
	B) Created MedsActivity to see Verses
	C) Fixed Alarm Notification

II) Takeaways

	- Background & Button Images
	- MedsActivity for showing Verses based off prescription

III) Resources

	- icon ic_autorenew_white = https://material.io/icons/#ic_autorenew

IV) To Do

	A) Features
		- Implement Toggle for Alarm Symptoms & Times
		- 911 Activity
		- Resources Activity
		- Settings Activity
	B) Design
		- App Icon
		- MedsActivity Design
	C) Back End
		- Sync user data with Firebase
	D) Codebase
		- Login & Registration as Fragments

V) Activity Log

A) Added Images
	- Background & Button images
	- Removed Homepage Toolbar
		`android:theme="@style/AppTheme.NoActionBar"`

B) Created MedsActivity to see Verses
	- Shows random verse based off Prescriptions
	- Used refresh icon ic_autorenew_white
	- Currently navigate-able to using 911_btn

C) Fixed Alarm Notification
	- Plays ringtone for duration
		- https://stackoverflow.com/questions/16059094/how-to-set-media-player-duration-in-android
	- Opens MedsActivity

================
=== 03/28/18 ===
================

I) Summary
	A) Abstracted all prescription handling to the PrescriptionManager
	B) Implemented Alarm Functionality

II) Takeaways

	- Implemented PrescriptionManager (also handles alarms)
	- Implemented Alarm Functionality
		- Ringtone, Vibrate, & Notification
		- PROBLEM: Never deleting any alarms
		- Ringtone doesn't end until App Closed out

III) Resources

	- simple alarm: https://www.youtube.com/watch?v=QcF4M2yUpY4
	- Recurring Alarm: https://www.youtube.com/watch?v=ZuPbt83VilY
	- Notification: https://github.com/sergiormrz560/RamblerApp/blob/master/app/src/main/java/com/example/sergiorm/testramblerapp/FirebaseMessageHandler.java

IV) To Do

	A) Features
		- Alarms Activity
			* Implement Toggle for Symptoms & Times
	B) Design
		- Need Button Images
	C) Back End
		- Sync user data with Firebase

V) Activity Log

A) Abstracted all prescription handling to the PrescriptionManager
	- See PrescriptionManager: https://github.com/brenthompson2/Soul_Meds/blob/alarmFunctionality/app/src/main/java/com/brendansapps/soulmeds/PrescriptionManager.java

B) Implemented Alarm Functionality
	- simple alarm: https://www.youtube.com/watch?v=QcF4M2yUpY4
	- Recurring Alarm: https://www.youtube.com/watch?v=ZuPbt83VilY
	- Getting the time:
		`
        Calendar calendar = Calendar.getInstance();
        calendar.set(
                calendar.get(Calendar.YEAR),
                calendar.get(Calendar.MONTH),
                calendar.get(Calendar.DAY_OF_MONTH),
                currentHour,
                currentMinute,
                0
        );
        `
	- Setting the Alarm:
		`
        AlarmManager alarmManager = (AlarmManager) mContext.getSystemService(ALARM_SERVICE);
        Intent intent = new Intent(mContext, AlarmHandler.class);
        PendingIntent pendingIntent = PendingIntent.getBroadcast(mContext, 0, intent, 0);
        alarmManager.setRepeating(AlarmManager.RTC_WAKEUP, timeInMillis, AlarmManager.INTERVAL_DAY, pendingIntent);
        `
	- Sending the Notification:
		`
        Intent intent = new Intent(mContext, AlarmsActivity.class);
        PendingIntent pendingIntent = PendingIntent.getActivity(mContext, REQUEST_CODE, intent, PendingIntent.FLAG_UPDATE_CURRENT);

        Notification notification = new NotificationCompat.Builder(mContext)
                .setContentText(notificationMessage)
                .setContentTitle(notificationTitle)
                .setContentIntent(pendingIntent)
                .setSmallIcon(R.mipmap.ic_launcher_round)
                .build();

        NotificationManager manager = (NotificationManager) mContext.getSystemService(NOTIFICATION_SERVICE);
        manager.notify(NOTIFICATION_ID, notification);
        `


================
=== 03/27/18 ===
================

I) Summary
	A) Started implementing alarm functionality

II) Takeaways

	- created new AlarmFunctionality branch
	- AlarmHandler should play ringtone and vibrate onReceive
	- AlarmHandler needs to send a push notification onReceive
	- Need to set up an AlarmManager / PendingIntent for each alarm time.

	- Perhaps there should be a whole PrescriptionManager object that the AlarmFragments communicate with
		- Handles SharedPreferences
		- Handles symptomList, timesList
		- Handles setting up the actual alarms

III) Resources

	- simple alarm: https://www.youtube.com/watch?v=QcF4M2yUpY4

IV) To Do

	A) Features
		- Alarms Activity
			* Implement Toggle for Symptoms & Times
			* Actual Alarm Functionality
	B) Design
		- Need Button Images
	C) Back End
		- Sync user data with Firebase

V) Activity Log

A) Started implementing alarm functionality
	- AlarmHandler inherits from BroadcastReceiver
	- https://www.youtube.com/watch?v=QcF4M2yUpY4
	- Should play default ringtone onReceive
		`
		MediaPlayer mediaPlayer = MediaPlayer.create(context, Settings.System.DEFAULT_RINGTONE_URI);
        mediaPlayer.start();
        `
	- Added vibrate onReceive
		`
		Vibrator vibrator = (Vibrator) context.getSystemService(context.VIBRATOR_SERVICE);
        vibrator.vibrate(10000);
        `
        - Gave permission in the AndroidManifest
        	`<uses-permission android:name="android.permission.VIBRATE"/>`
	- Needed = all of the AlarmManager / PendingIntent stuff
		- Starts at 5 minutes into tutorial video
		- will need to do this for every alarm
	- Needed = onReceive sends notification to user
	- Needed = clicking on notification brings user to the appropriate Verses

================
=== 03/26/18 ===
================

I) Summary
	A) Saving & Loading prescription data

II) Takeaways

III) Resources

IV) To Do

	A) Features
		- Alarms Activity
			* Implement Toggle for Symptoms & Times
			* Actual Alarm Functionality
	B) Design
		- Need Button Images
	C) Back End
		- Sync user data with Firebase

V) Activity Log

A) Saving & Loading prescription data
	- StringBuilder for Shared Preferences: https://stackoverflow.com/questions/7965290/put-and-get-string-array-from-shared-preferences
		- Use StringBuilder and separate elements with commas
		- use .split(",") to parse
		- `userPrescriptionList = compressedSymptomString.split(",");`
	- String[] -> ArrayList<String>
		- https://stackoverflow.com/10230929/how-can-i-convert-string-to-arrayliststring
		- `ArrayList<String> listOfCurrentSymptoms = new ArrayList<String>(Arrays.asList(userPrescriptionList));`

================
=== 03/25/18 ===
================

I) Summary
	A) Started using official Data
	B) Researched saving Symptoms to shared preferences
	C) Made Alarms Edit-able
	D) Made Alarms Add-able
	E) Switched to AMPM format
	F) Implementing Symptom Select (Edit & Add New)

II) Takeaways

	- Alarm Symptoms generated from official data
	- Alarm Times can be added & edited
	- Alarm Times are AM|PM format

III) Resources

A) Resources for TimePickerDialog & Pattern Matching
	- Default TimePickerDialog: https://stackoverflow.com/questions/17901946/timepicker-dialog-from-clicking-edittext
	- Java Pattern Matching Strings: https://stackoverflow.com/questions/30497850/how-to-do-pattern-matching-of-strings-in-java
	- Regular expression for Time: https://stackoverflow.com/questions/7536755/regular-expression-for-matching-hhmm-time-format
	- String to Int conversion: https://stackoverflow.com/questions/2709253/converting-a-string-to-an-integer-on-android

IV) To Do

	A) Features
		- Alarms Activity
			* Save & Retrieve the data
			* Implement Toggle for Symptoms & Times
			* Actual Alarm Functionality
	B) Design
		- Need Button Images
	C) Back End
		- Sync user data with Firebase

V) Activity Log

A) Started using official Data
	- Symptoms section of alarm page displays 5 random symptoms from the official list

B) Researched saving Symptoms to shared preferences
	- Store the user's symptoms array as 1 shared preference by converting it to a JSON string
		- requires serialization / parsing upon save / load
		- https://stackoverflow.com/questions/12347963/android-store-array-of-strings-in-shared-preferences-dynamically

C) Made Alarms Edit-able
	- using basic TimePickerDialog
		`
		TimePickerDialog mAlarmTimePickerDialog;
        mAlarmTimePickerDialog = new TimePickerDialog(getContext(),
                new TimePickerDialog.OnTimeSetListener(){
                    @Override
                    public void onTimeSet(TimePicker view, int hourOfDay, int minute) {
                        timesList.set(indexSelected, hourOfDay + ":" + minute);
                        timesListAdapter.notifyDataSetChanged();
                        timesListAdapter.notifyDataSetInvalidated();
                        Log.d(TAG, String.valueOf(timesList));
                    }
                }, currentHour, currentMinute, false);
        mAlarmTimePickerDialog.show();
		`
	- got current time using pattern matching with regex
		- See resources section for resources
		`
		String currentTime = timesList.get(indexSelected);
        String currentHour_string;
        String currentMinute_string;
        Pattern timePattern = Pattern.compile("^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9])$");
        Matcher m = timePattern.matcher(currentTime);
        m.find();
        currentHour_string = m.group(1);
        currentMinute_string = m.group(2);
        Log.d(TAG, "Time: " + currentHour_string + ":" + currentMinute_string);
        int currentHour = Integer.parseInt(currentHour_string);
        int currentMinute = Integer.parseInt(currentMinute_string);
        `

D) Made Alarms Add-able
	- same TimePickerDialog except add() instead of set()
	- findViewById in fragment & OnClickListener()
		`
		addAlarmButton.setOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View v) {
                addAlarmTime();
            }
        });
        `

E) Switched to AMPM format
	- Created function to handle conversion
		`
		public String getTimeInAMPM(int hour, int minute){
	        if (hour > 12){
	            hour -= 12;
	            return (hour + ":" + minute + " PM");
	        }
	        return (hour + ":" + minute + " AM");
	    }
	    `
	- Updated regular expression pattern
		`("^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]) (AM|PM)$")`

F) Implementing Symptom Select (Edit & Add New)
	- necessary for Add or Edit
	- Using AlertDialog & Builder: https://stackoverflow.com/questions/2115758/how-do-i-display-an-alert-dialog-on-android
	- Adding an ArrayAdapter: https://stackoverflow.com/questions/15762905/how-can-i-display-a-list-view-in-an-android-alert-dialog

================
=== 03/24/18 ===
================

I) Summary
	A) Started adding official Data

II) Takeaways

	- Created a DataManager where the objects are statically defined
		- Constructor not working properly
		- Issue = reading entire database into memory upon construction of the alarms_fragment1
		- Need less memory-intensive alternative

III) Resources

	- Couldn't find any good ways to store static data internally. SQLite seamed like overkill. Shared Preferences might be better.
	- Should probably use XML files in res > values.
		- define a struct item in one file and create an array of them in another
		- https://stackoverflow.com/questions/28446569/using-a-c-struct-in-android-app-java-and-xml

IV) To Do

	A) Features
		- Alarms Activity
			* Save & Retrieve the data
			* Symptoms: implement Add, Toggle
			* Alarms: implement Add, Edit, Toggle, and Delete
			* Actual Alarm Functionality
	B) Design
		- Need Button Images
	C) Back End
		- Sync user data with Firebase

V) Activity Log

A) Started adding official Data
	- Created a DataManager class and a SymptomObject
		`
		class SymptomObject{
		    public String symptomName;
		    public int numVerses;
		    public ArrayList<String> arrayVerses;
		    public ArrayList<String> arrayReferences;
		    public ArrayList<String> arrayVerseCards;
		}
		`
	- Wrote out all of the data for 3/25 symptoms
		- name & 5 verse data (numVerses = array.size())
		- delete / deallocate object
			- currentSymptom = null;
			- System.gc();


================
=== 03/22/18 ===
================

I) Summary
	A) Simplified Login Interface
	B) Started bringing in actual resources
	C) Started making Alarm Times editable

II) Takeaways

	- Login / Register working fine
	- Should use "Spinner" for selecting symptoms:

III) Resources

IV) To Do

	A) Features
		- Alarms Activity
			* Save & Retrieve the data
			* Symptoms: implement Add, Toggle
			* Alarms: implement Add, Edit, Toggle, and Delete
			* Actual Alarm Functionality
	B) Design
		- Need Button Images
	C) Back End
		- Sync user data with Firebase

V) Activity Log

A) Simplified Login Interface
	- made navigation buttons style buttonBarNegativeButtonStyle

B) Started bringing in actual resources
	- app > src > main > res > values > symptomList.xml
	- app > src > main > res > values > bibleQuoteList.xml

C) Started making Alarm Times editable
	- https://developer.android.com/guide/topics/ui/controls/pickers.html
		- Should use DialogFragment to display TimePicker
	1) Created java class alarms_TimePickerDialog
		- extends DialogFragment
		- implements TimePickerDialog.OnTimeSetListener
		- overwrite onCreateDialog
			`
	        super.onCreateDialog(savedInstanceState);
	        // Set default value to current time
	        final Calendar c = Calendar.getInstance();
	        int hour = c.get(Calendar.HOUR_OF_DAY);
	        int minute = c.get(Calendar.MINUTE);

	        // Create TimePickerDialog instance
	        return new TimePickerDialog(getActivity(), this, hour, minute, true);
	        `
	2) Open the Dialog when action started
		`
		    DialogFragment timeSelectFragment = new alarms_TimePickerDialog();
		    timeSelectFragment.show(getActivity().getFragmentManager(), "timePicker");
	    `

================
=== 03/21/18 ===
================

I) Summary
	A) Implemented Alarm Time Delete using a context menu
	B) Added back button for Alarm page
	C) Started Add for Symptoms and Times using FloatingActionButton
	D) Fixed Navigation between Login

II) Takeaways

	- Now able to delete symptoms
		- long click to open context menu
		- select delete in the context menu
	- Need to implement function for adding new Symptom or Time
	- Crappy implementation of only going to login screen the first time

III) Resources

	- FloatingActionButton: https://developer.android.com/guide/topics/ui/floating-action-button.html
	- Android Icons: https://material.io/icons/

IV) To Do

	A) Features
		- Alarms Activity
			* Save & Retrieve the data
			* Symptoms: implement Add, Toggle
			* Alarms: implement Add, Edit, Toggle, and Delete
	B) Design
		- Need Button Images
	C) Back End
		- Sync user data with Firebase

V) Activity Log

A) Implemented Alarm Time Delete using a context menu
	- see Activity Log from 03/20/18

B) Added back button for Alarm page
	1) Set MainActivity as parent of AlarmsActivity
		- `android:parentActivityName=".MainActivity"`
	2) Bring back navbar by removing the theme in AndroidManifest
	3) remove custom ToolBar in activity_alarms.xml
	- the drop shadow looks meh

C) Started Add for Symptoms and Times using FloatingActionButton
	1) Add the Icons
		- https://material.io/icons/
		- download as PNG
		- add the 6 drawable-<resolution> folders to src > main > res
		- https://material.io/icons/#ic_add
		- https://material.io/icons/#ic_alarm_add

	2) Add the button to the fragment layout
	    <android.support.design.widget.FloatingActionButton
	        android:id="@+id/action_add_symptom"
	        android:layout_width="wrap_content"
	        android:layout_height="wrap_content"
	        android:layout_marginBottom="16dp"
	        android:layout_marginRight="16dp"
	        app:layout_constraintBottom_toBottomOf="parent"
	        app:layout_constraintRight_toRightOf="parent"
	        android:backgroundTint="@color/colorPrimary"
	        android:src="@drawable/ic_add_white_24dp"/>

	3) Handle the button clicked

D) Fixed Navigation between Login
	- calling finish(); to close
	- using static numVisits to manage opening Login Activity
		- if numVisits == 0, Login
	- Ugly shortcut

================
=== 03/20/18 ===
================

I) Summary
	A) Implemented Alarm Symptom Delete using a context menu

II) Takeaways

	- Now able to delete symptoms
		- long click to open context menu
		- select delete in the context menu

III) Resources

	- Delete List items w/ Context Menu: https://www.youtube.com/watch?v=2mrN5r9qshg

IV) To Do

	A) Features
		- Alarms Activity
			* Save & Retrieve the data
			* Symptoms: implement Add, Toggle
			* Alarms: implement Add, Edit, Toggle, and Delete
	B) Design
		- Need Button Images
	C) Backend
		- Sync user data with Firebase

V) Activity Log

A) Implemented Alarm Symptom Delete using a context menu
	- https://www.youtube.com/watch?v=2mrN5r9qshg

	1) Create the Menu Layout File
		- (right click on res > menu) > new > menu resource file
		- just add items
			- `<item android:id="@+id/delete"
        android:title="Delete"></item>`

	2) Register the ListView with the Context Menu
		- in onCreateView()
		- `registerForContextMenu(timeListView);`

	3) Override Creation of Context Menu
	    @Override
	    public void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo) {
	        super.onCreateContextMenu(menu, v, menuInfo);
	        MenuInflater menuInflater = new MenuInflater(this.getContext());
	        menuInflater.inflate(R.menu.alarms_symptom_context_menu, menu);
	    }

    4) Override handling Menu Action Selected
	    @Override
	    public boolean onContextItemSelected(MenuItem item) {
	        AdapterView.AdapterContextMenuInfo obj = (AdapterView.AdapterContextMenuInfo) item.getMenuInfo();

	        switch (item.getItemId()){
	            case R.id.delete:
	                symptomsList.remove(obj.position);
	                symptomsListAdapter.notifyDataSetChanged();
	                Log.d(TAG, String.valueOf(symptomsList));
	                break;
	            default:
	                break;
	        }

	        return super.onContextItemSelected(item);
	    }

================
=== 03/14/18 ===
================

I) Summary
	A) Created Symptoms Scaffold for tabbedAlarmsListView
	B) Created Alarms Scaffold for tabbedAlarmsListView
	C) Designed ListView Items

II) Takeaways

	- Alarms is now a Tabbed Activity with a ListView
	- Delete button not working

III) Resources

	- Android ListView tutorial: https://www.journaldev.com/10416/android-listview-with-custom-adapter-example-tutorial
	- My ExpandableListView version: https://github.com/brenthompson2/Soul_Meds/tree/expandableAlarmsListView
	- Android ListView item design:
	- Adding button to ListView item: https://stackoverflow.com/questions/17525886/listview-with-add-and-delete-buttons-in-each-row-in-android

IV) To Do

	A) Features
		- Alarms Activity
			* Create Alarms Tab
			* Save & Retrieve the data
			* Symptoms: implement Add, Toggle, and Delete
			* Alarms: implement Add, Edit, Toggle, and Delete
	B) Design
		- Need Button Images
	C) Backend
		- Sync user data with Firebase

V) Activity Log

A) Created Symptoms Scaffold for tabbedAlarmsListView
	- Fragment 1 = Symptoms
	- Fragment 2 = Alarms
	1) Create Fragment 1 Layout
		- Just add a a ListView
		- id = alarms_list
	2) Create alarms_list_item layout resource
		- Just a TextView
		- id = alarms_list_item
		- paddingLeft = "?android:attr/listPreferredItemPaddingLeft"
	3) Create AlarmsListAdapter custom ArrayAdapter
		a) Create Members
			- private Context mContext;
    		- private ArrayList<String> mListData;
		    - private int mResource;
		    - private int mTextViewResourceId;
		b) Define members in constructor
			"
			public AlarmsListAdapter(@NonNull Context context, int resource, int textViewResourceId, @NonNull List objects) {
		        super(context, resource, textViewResourceId, objects);
		        this.mContext = context;
		        this.mListData = (ArrayList<String>) objects;
		        this.mResource = resource;
		        this.mTextViewResourceId = textViewResourceId;
		        Log.d(TAG, String.valueOf(mListData));
		    }
		    "
		c) Setup getView()
			"@NonNull
		    @Override
		    public View getView(int position, @Nullable View convertView, @NonNull ViewGroup parent) {

		        // Get the data
		        String currentItemText = mListData.get(position);
		        // Log.d(TAG, currentItemText);

		        if (convertView == null) {
		            LayoutInflater inflater = (LayoutInflater)this.mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		            convertView = inflater.inflate(mResource, null);
		        }

		        TextView alarmItemTextView = convertView.findViewById(mTextViewResourceId);
		        alarmItemTextView.setTypeface(null, Typeface.BOLD);
		        alarmItemTextView.setText(currentItemText);
		        return convertView;
		    }
			"
	4) Create the List in alarms_fragment1
		a) Create Members
		    private ListView symptomListView;
		    private AlarmsListAdapter symptomsListAdapter;
		    private List<String> symptomsList;
	    b) Setup the List View in onCreateView()
	    	"
	        symptomListView = view.findViewById(R.id.alarms_list_symptoms);
	        initSymptomData();
	        symptomsListAdapter = new AlarmsListAdapter(this.getContext(), R.layout.alarms_list_item, R.id.alarms_list_item_TextView, symptomsList);
	        symptomListView.setAdapter(symptomsListAdapter);
	        "
        c) Define the data for symptomsList
        	"
        	private void initSymptomData(){
		        symptomsList = getCurrentSymptoms();
		        Log.d(TAG, String.valueOf(symptomsList));
		    }
		    "
	    d) For testing, generate the data
	    	"
	    	private ArrayList<String> getCurrentSymptoms(){
		        // TODO: Retrieve the saved list of the User's symptoms
		        ArrayList<String> listOfCurrentSymptoms = new ArrayList<>();

		        // Fake list of possible symptoms
		        ArrayList<String> fakeListOfSymptoms = new ArrayList<>(Arrays.asList("anger", "jealousy", "greed", "lust", "hate", "stealing", "violence"));

		        // Generating a fake list of user's  current Symptoms
		        for (int i = 0; i < 5; i++){
		            int randomIndex = new Random().nextInt(fakeListOfSymptoms.size());
		            listOfCurrentSymptoms.add(fakeListOfSymptoms.get(randomIndex));
		        }

		        return listOfCurrentSymptoms;
		    }
		    "

C) Designed ListView Items
	- Added a delete button
		- https://stackoverflow.com/questions/17525886/listview-with-add-and-delete-buttons-in-each-row-in-android
		- Wrapped everything in a RelativeLayout
		"
        android:layout_marginEnd="?android:attr/listPreferredItemPaddingLeft"
        android:layout_alignParentEnd="true"
        "

================
=== 03/13/18 ===
================

I) Summary
	A) Separated Alarm Implementations into new branches

II) Takeaways

	- Now have 3 branches with different Alarms Activity implementations

III) Resources

IV) To Do

V) Activity Log

A) Separated Alarm Implementations into new branches
	1) expandableAlarmsListView
		- Dynamic list of editable, toggleable, deleteable Prescription objects (Symptom & Time)
	2) tabbedAlarmsOriginal
		- 3 tabs each with a Prescription object (symptom & tab)
	3) tabbedAlarmsListView
		- 2 separate tabs, 1 with the symptoms and 1 with the times
		- dynamic, toggle-able,delete-able

================
=== 03/11/18 ===
================

I) Summary
	A) Created New Alarms Activity

II) Takeaways

	- Created another incorrect version of the alarm activity
		- Dynamic list of editable, toggle-able, delete-able Prescription objects (Symptom & Time)
		- Need to keep the symptoms separate from the times since all symptoms get addressed for every alarm

III) Resources

	- Expandable ListView: https://youtu.be/jZxZIFnJ9jE

IV) To Do

V) Activity Log

A) Created New Alarms Activity
	i) Simplified Layout:
		- List of AlarmPrescription objects
		- AlarmPrescription object = symptom, time, end date, on/off
		- Making it one form since the Android Time Pickers are supposed to be those big analog clocks
		- Using one object allows for the amount of them available and on to be dynamic
		- Decided to use ExpandableListView
			- top list = symptoms for all AlarmPrescriptions
			- expanded = edit properties

	ii) Created Alarms Activity
		- Layout for the activity itself
		- File -> New -> Empty Activity
		- Navigated to it when Alarms button clicked

	iii) Created Expandable ListView
		- https://youtu.be/jZxZIFnJ9jE
		1) Add ExpandableListView, give ID, fill space
		2) Add prescriptions_list_group layout resource file
			- Layout for the list itself
			- right click on "layout" in the project navigation
			- new -> layout resource file -> "prescriptions_list_group"
			- Text View with special padding
		3) Add prescription_item layout resource file
			- layout for an item's children
			- Text view with special padding
		4) Create PrescriptionsListAdaptor Java Class
			- extends ExpandableListAdaptor
			- Implement all Methods
		5) Initialize in AlarmsActivity
			- ListView, Adapter, DataHeader List, HashMap
			a) Get the data and use it to instantiate the adapter
				prescriptionsListAdapter = new PrescriptionsListAdapter(this, prescriptionListDataHeader, prescriptionHashMap);
			b) setAdaptor of ListView to the initialized adapter
				prescriptionsListView.setAdapter(prescriptionsListAdapter);

	iv) Made prescription info edit-able
		1) Listen for click on prescription info
	        prescriptionsListView.setOnChildClickListener(new ExpandableListView.OnChildClickListener() {
	            @Override
	            public boolean onChildClick(ExpandableListView parent, View v, int groupPosition, int childPosition, long id) {
	                Log.d(TAG, "Child " + groupPosition + " was clicked");
	                return true;
	            }
	        });
	    2)



================
=== 03/07/18 ===
================

I) Summary
	A) Removed old tabbed Alarms Activity
	B) Created Login Activity
	C) Created Register Activity

II) Takeaways

	- Now able to Login & Register with Firebase
	- Navigating between the activities is not super smooth.
		- Should probably replace the two separate login & register activities with one activity that has 2 fragments (tabbed or bottom navigation)

III) Resources

	- Connecting to Firebase
		- https://firebase.google.com/docs/auth/android/start/
	- Android Activity Lifecycle events
		- https://developer.android.com/guide/components/activities/activity-lifecycle.html#onresume

IV) To Do

V) Activity Log

A) Removes old tabbed Alarms Activity
	- removed all of the files
	- commented out navigation when alarm btn pressed

B) Created Login Activity
	- File -> New -> Activity -> Login Activity
	- Tools -> Firebase -> Authentication -> Email & Password Authentication
		1) Connect your app to Firebase
			- connected to Soul Meds
		2) Add Firebase Authentication to your app
			- adds dependencies
		3) Added Checking Current Auth State
			- LoginActivity.java -> onCreate
			- https://firebase.google.com/docs/auth/android/start/
		4) Sign in Existing Users
			- LoginActivity.java -> async doInBackground
			- https://firebase.google.com/docs/auth/android/start/

C) Created Register Activity (Should do fragments)
	- Copied Login Activity & Login Layout
	- Enabled navigation between Login & Register
	- handled Registering
		- https://firebase.google.com/docs/auth/android/start/
	- Quit Login after successful registration
		- https://developer.android.com/guide/components/activities/activity-lifecycle.html#onresume
		- onResume(){
			if loggedIn() {
				finish();
			}}
